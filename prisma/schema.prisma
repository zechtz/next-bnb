// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  name            String?
  email           String?       @unique
  email_verified  DateTime?
  image           String?
  hashed_password String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  favorite_ids    Int[]         @db.Integer
  accounts        Account[]
  listings        Listing[]
  reservations    Revervation[]

  @@map("users")
}

model Account {
  id                  Int     @id @default(autoincrement())
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String
  session_state       String?
  User                User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id             Int?

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model Listing {
  id             Int           @id @default(autoincrement())
  title          String
  description    String
  category       String
  image_src      String
  room_count     Int
  bathroom_count Int
  guest_count    Int
  location_value String
  price          Int
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  User           User?         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id        Int?
  reservations   Revervation[]

  @@map("listings")
}

model Revervation {
  id          Int      @id @default(autoincrement())
  description String
  total_price Int
  start_date  DateTime
  end_date    DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  User        User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int?
  Listing     Listing? @relation(fields: [listing_id], references: [id], onDelete: Cascade)
  listing_id  Int?

  @@map("reservations")
}
